/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type User = {
  authId?: string;
  email?: string;
  userName?: string;
  games: (Game["_id"] | Game)[];
  gamesPlayed?: number;
  avgContribution?: number;
  totalContribution?: number;
  stats?: Stats["_id"] | Stats;
  _id: mongoose.Types.ObjectId;
  updatedAt?: Date;
  createdAt?: Date;
};

/**
 * Lean version of UserDocument (type alias of `User`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type UserQuery = mongoose.Query<any, UserDocument, UserQueries> &
  UserQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `UserSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type UserQueries = {};

export type UserMethods = {};

export type UserStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserModel = mongoose.Model<UserDocument, UserQueries> & UserStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<
  UserDocument,
  UserModel,
  UserMethods,
  UserQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  UserQueries
> &
  UserMethods & {
    authId?: string;
    email?: string;
    userName?: string;
    games: mongoose.Types.Array<GameDocument["_id"] | GameDocument>;
    gamesPlayed?: number;
    avgContribution?: number;
    totalContribution?: number;
    stats?: StatsDocument["_id"] | StatsDocument;
    _id: mongoose.Types.ObjectId;
    updatedAt?: Date;
    createdAt?: Date;
  };

/**
 * Lean version of GameDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GameDocument.toObject()`. To avoid conflicts with model names, use the type alias `GameObject`.
 * ```
 * const gameObject = game.toObject();
 * ```
 */
export type Game = {
  player1: {
    id?: User["_id"] | User;
    plus?: number;
    plusPoint?: number;
    minus?: number;
    minusPoint?: number;
  };
  player2: {
    id?: User["_id"] | User;
    plus?: number;
    plusPoint?: number;
    minus?: number;
    minusPoint?: number;
  };
  player3: {
    id?: User["_id"] | User;
    plus?: number;
    plusPoint?: number;
    minus?: number;
    minusPoint?: number;
  };
  player4: {
    id?: User["_id"] | User;
    plus?: number;
    plusPoint?: number;
    minus?: number;
    minusPoint?: number;
  };
  team1Score?: number;
  team2Score?: number;
  win?: boolean;
  _id: mongoose.Types.ObjectId;
  updatedAt?: Date;
  createdAt?: Date;
};

/**
 * Lean version of GameDocument (type alias of `Game`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Game } from "../models"
 * import { GameObject } from "../interfaces/mongoose.gen.ts"
 *
 * const gameObject: GameObject = game.toObject();
 * ```
 */
export type GameObject = Game;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type GameQuery = mongoose.Query<any, GameDocument, GameQueries> &
  GameQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `GameSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type GameQueries = {};

export type GameMethods = {};

export type GameStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Game = mongoose.model<GameDocument, GameModel>("Game", GameSchema);
 * ```
 */
export type GameModel = mongoose.Model<GameDocument, GameQueries> & GameStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Game schema instances:
 * ```
 * const GameSchema: GameSchema = new mongoose.Schema({ ... })
 * ```
 */
export type GameSchema = mongoose.Schema<
  GameDocument,
  GameModel,
  GameMethods,
  GameQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Game = mongoose.model<GameDocument, GameModel>("Game", GameSchema);
 * ```
 */
export type GameDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  GameQueries
> &
  GameMethods & {
    player1: {
      id?: UserDocument["_id"] | UserDocument;
      plus?: number;
      plusPoint?: number;
      minus?: number;
      minusPoint?: number;
    };
    player2: {
      id?: UserDocument["_id"] | UserDocument;
      plus?: number;
      plusPoint?: number;
      minus?: number;
      minusPoint?: number;
    };
    player3: {
      id?: UserDocument["_id"] | UserDocument;
      plus?: number;
      plusPoint?: number;
      minus?: number;
      minusPoint?: number;
    };
    player4: {
      id?: UserDocument["_id"] | UserDocument;
      plus?: number;
      plusPoint?: number;
      minus?: number;
      minusPoint?: number;
    };
    team1Score?: number;
    team2Score?: number;
    win?: boolean;
    _id: mongoose.Types.ObjectId;
    updatedAt?: Date;
    createdAt?: Date;
  };

/**
 * Lean version of StatsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StatsDocument.toObject()`. To avoid conflicts with model names, use the type alias `StatsObject`.
 * ```
 * const statsObject = stats.toObject();
 * ```
 */
export type Stats = {
  gamesPlayed?: number;
  avgContribution?: number;
  totalContribution?: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of StatsDocument (type alias of `Stats`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Stats } from "../models"
 * import { StatsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const statsObject: StatsObject = stats.toObject();
 * ```
 */
export type StatsObject = Stats;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type StatsQuery = mongoose.Query<any, StatsDocument, StatsQueries> &
  StatsQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `StatsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type StatsQueries = {};

export type StatsMethods = {};

export type StatsStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Stats = mongoose.model<StatsDocument, StatsModel>("Stats", StatsSchema);
 * ```
 */
export type StatsModel = mongoose.Model<StatsDocument, StatsQueries> &
  StatsStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Stats schema instances:
 * ```
 * const StatsSchema: StatsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type StatsSchema = mongoose.Schema<
  StatsDocument,
  StatsModel,
  StatsMethods,
  StatsQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Stats = mongoose.model<StatsDocument, StatsModel>("Stats", StatsSchema);
 * ```
 */
export type StatsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  StatsQueries
> &
  StatsMethods & {
    gamesPlayed?: number;
    avgContribution?: number;
    totalContribution?: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
